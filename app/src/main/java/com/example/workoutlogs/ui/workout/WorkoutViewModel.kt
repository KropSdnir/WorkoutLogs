// app/src/main/java/com/example/workoutlogs/ui/workout/WorkoutViewModel.kt
// Timestamp: 2025-05-14 19:03:00
// Scope: ViewModel for managing workout logs in WorkoutLogs app

package com.example.workoutlogs.ui.workout

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.workoutlogs.data.db.dao.WorkoutLogDao
import com.example.workoutlogs.data.model.WorkoutLog
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class WorkoutViewModel @Inject constructor(
    private val workoutLogDao: WorkoutLogDao
) : ViewModel() {

    val workoutLogs: StateFlow<List<WorkoutLog>> = workoutLogDao.getAllWorkoutLogs()
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    fun addWorkoutLog(exerciseId: Int, date: java.time.LocalDate, sets: Int?, reps: Int?, weight: Float?) {
        viewModelScope.launch {
            val newLog = WorkoutLog(
                id = 0, // Auto-generated by Room
                exerciseId = exerciseId,
                date = date,
                sets = sets,
                reps = reps,
                weight = weight
            )
            try {
                workoutLogDao.insert(newLog)
                Log.d("WorkoutViewModel", "Added workout log for exercise ID $exerciseId on $date")
            } catch (e: Exception) {
                Log.e("WorkoutViewModel", "Error adding workout log: ${e.message}", e)
            }
        }
    }

    fun deleteWorkoutLog(id: Int) {
        viewModelScope.launch {
            try {
                workoutLogDao.deleteById(id)
                Log.d("WorkoutViewModel", "Deleted workout log ID $id")
            } catch (e: Exception) {
                Log.e("WorkoutViewModel", "Error deleting workout log: ${e.message}", e)
            }
        }
    }
}