// app/src/main/java/com/example/workoutlogs/ui/workout/ExerciseViewModel.kt
// Timestamp: 2025-05-14 19:28:00
// Scope: ViewModel for managing exercises in WorkoutLogs app

package com.example.workoutlogs.ui.workout

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.workoutlogs.data.db.dao.ExerciseDao
import com.example.workoutlogs.data.model.Exercise
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class ExerciseViewModel @Inject constructor(
    private val exerciseDao: ExerciseDao,
    private val defaultExercises: List<Exercise>
) : ViewModel() {

    private val _searchQuery = MutableStateFlow("")
    val searchQuery: String get() = _searchQuery.value

    private val _selectedCategory = MutableStateFlow("")
    val selectedCategory: String get() = _selectedCategory.value

    private val _showSelectedOnly = MutableStateFlow(false)
    val showSelectedOnly: Boolean get() = _showSelectedOnly.value

    val exercises: StateFlow<List<Exercise>> = combine(
        exerciseDao.getAllExercises(),
        _searchQuery,
        _selectedCategory,
        _showSelectedOnly
    ) { exercises, query, category, showSelectedOnly ->
        exercises
            .filter { it.name.contains(query, ignoreCase = true) }
            .filter { if (category.isNotBlank()) it.category == category else true }
            .filter { if (showSelectedOnly) it.isSelected else true }
    }.stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    val selectedExercises: StateFlow<List<Exercise>> = exercises
        .map { it.filter { exercise -> exercise.isSelected } }
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    val categories: StateFlow<List<String>> = exercises
        .map { it.map { exercise -> exercise.category }.distinct().sorted() }
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    init {
        viewModelScope.launch {
            try {
                val existingExercises = exerciseDao.getAllExercisesSnapshot()
                Log.d("ExerciseViewModel", "Fetched ${existingExercises.size} exercises")
                if (existingExercises.isEmpty()) {
                    defaultExercises.forEach { exercise ->
                        exerciseDao.insert(exercise)
                        Log.d("ExerciseViewModel", "Inserted default exercise: ${exercise.name}")
                    }
                }
            } catch (e: Exception) {
                Log.e("ExerciseViewModel", "Error initializing exercises: ${e.message}", e)
            }
        }
    }

    fun updateSearchQuery(query: String) {
        _searchQuery.value = query
        Log.d("ExerciseViewModel", "Updated search query: $query")
    }

    fun updateSelectedCategory(category: String) {
        _selectedCategory.value = category
        Log.d("ExerciseViewModel", "Selected category: $category")
    }

    fun toggleShowSelectedOnly() {
        _showSelectedOnly.value = !_showSelectedOnly.value
        Log.d("ExerciseViewModel", "Show selected only: ${_showSelectedOnly.value}")
    }

    fun toggleExerciseSelection(id: Int, isSelected: Boolean) {
        viewModelScope.launch {
            try {
                exerciseDao.updateSelection(id, isSelected)
                Log.d("ExerciseViewModel", "Toggled exercise ID $id to selected: $isSelected")
            } catch (e: Exception) {
                Log.e("ExerciseViewModel", "Error toggling selection: ${e.message}", e)
            }
        }
    }

    fun getExerciseById(id: Int): Exercise? {
        val exercise = exercises.value.find { it.id == id }
        Log.d("ExerciseViewModel", "Fetched exercise ID $id: ${exercise?.name ?: "Not found"}")
        return exercise
    }

    fun saveExercise(name: String, category: String, notes: String?) {
        viewModelScope.launch {
            try {
                val newExercise = Exercise(
                    id = 0, // Auto-generated by Room
                    name = name,
                    category = category,
                    notes = notes,
                    isSelected = false
                )
                exerciseDao.insert(newExercise)
                Log.d("ExerciseViewModel", "Saved new exercise: $name")
            } catch (e: Exception) {
                Log.e("ExerciseViewModel", "Error saving exercise: ${e.message}", e)
            }
        }
    }
}